count <- 0
previous_number <- NA
repeat {
# increment counter
count <- count + 1
# generate a random number between 1 and 10
random_number <- sample(1:10, 1)
# check if the number is the same as the previous number
if (random_number == previous_number) {
cat("Number generated:", random_number, "\n")
cat("Iterations:", count, "\n")
# break out of the loop
break
}
# update previous number variable
previous_number <- random_number
}
random_number == previous_number
random_number == previous_number
# initialize variables
count <- 0
previous_number <- 0
repeat {
# increment counter
count <- count + 1
# generate a random number between 1 and 10
random_number <- sample(1:10, 1)
# check if the number is the same as the previous number
if (random_number == previous_number) {
cat("Number generated:", random_number, "\n")
cat("Iterations:", count, "\n")
# break out of the loop
break
}
# update previous number variable
previous_number <- random_number
}
# initialize variables
count <- 0
previous_number <- 0
repeat {
# increment counter
count <- count + 1
# generate a random number between 1 and 10
random_number <- sample(1:10, 1)
# check if the number is the same as the previous number
if (random_number == previous_number) {
cat("Number generated:", random_number, "\n")
cat("Iterations:", count, "\n")
# break out of the loop
break
}
# update previous number variable
previous_number <- random_number
}
# initialize variables
count <- 0
previous_number <- 0
repeat {
# increment counter
count <- count + 1
# generate a random number between 1 and 10
random_number <- sample(1:10, 1)
# check if the number is the same as the previous number
if (random_number == previous_number) {
cat("Number generated:", random_number, "\n")
cat("Iterations:", count, "\n")
# break out of the loop
break
}
# update previous number variable
previous_number <- random_number
}
# initialize variables
count <- 0
previous_number <- 0
repeat {
# increment counter
count <- count + 1
# generate a random number between 1 and 10
random_number <- sample(1:10, 1)
# check if the number is the same as the previous number
if (random_number == previous_number) {
cat("Number generated:", random_number, "\n")
cat("Iterations:", count, "\n")
# break out of the loop
break
}
# update previous number variable
previous_number <- random_number
}
# initialize variables
count <- 0
previous_number <- 0
repeat {
# increment counter
count <- count + 1
# generate a random number between 1 and 10
random_number <- sample(1:10, 1)
# check if the number is the same as the previous number
if (random_number == previous_number) {
cat("Number generated:", random_number, "\n")
cat("Iterations:", count, "\n")
# break out of the loop
break
}
# update previous number variable
previous_number <- random_number
}
library(readr)
individual_data_sub_1 <- read_csv("Documents/GitHub/r-seminar-24/exercises/data/individual_data_sub_1.csv")
View(individual_data_sub_1)
# initialize variables
price <- 100
time_step <- 0
while (price > 50 && price < 150) {
# simulate the next price
price <- price * (1 + rnorm(1, 0, 0.1))
# increment the count variable
time_step <- time_step + 1
}
if (price < 50) {
cat("The stock price fell below 50 after", time_step, "time steps")
} else {
cat("The stock price rose above 150 after", time_step, "time steps")
}
# initialize variable
random_number <- 0
while (abs(random_number) <= 1) {
# generate a random standard normal number
random_number <- rnorm(1)
# skip printing if negative number
if (random_number < 0) {
next
}
cat("Random number:", random_number, "\n")
}
iris %>%
filter(Species %in% c('setosa', 'versicolor')) %>%
slice(49:52)
library(tidyverse)
library(magrittr)
```{r echo=FALSE, message=FALSE}
library(tidyverse)
library(magrittr)
iris %>%
filter(Species %in% c('setosa', 'versicolor')) %>%
slice(49:52)
iris %>%
filter(Species == 'setosa' | Species == 'versicolor') %>%
slice(49:52)
measures_sub_1 <- tibble(
subject = rep(1, 9),
value = rnorm(9, 100, 1)
)
measures_sub_2 <- tibble(
subject = rep(2, 10),
gender = rep('f', 10),
value = rnorm(10, 100, 1)
)
rbind(measures_sub_1, measures_sub_2)
bind_rows(measures_sub_1, measures_sub_2) %>%
head(n = 2)
bind_rows(measures_sub_1, measures_sub_2) %>%
slice(9:11)
bind_rows(measures_sub_1, measures_sub_2) %>%
slice(8:11)
cbind(measures_sub_1, measures_sub_2)
measures_sub_1 <- tibble(
subject = rep(1, 9),
value = rnorm(9, 100, 1)
)
measures_sub_2 <- tibble(
subject = rep(2, 10),
gender = rep('f', 10),
value = rnorm(10, 100, 1)
)
cbind(measures_sub_1, measures_sub_2)
bind_cols(measures_sub_1, measures_sub_2)
measures <- tibble(subject = rep(paste0("s", 1:10),
each = 10),
iq_test = rnorm(100, 100, 15))
meta_data <- tibble(subject = paste0("s", 1:10),
age = rep(c("old", "young"),
each = 5))
measures %>%
inner_join(meta_data, by = 'subject') %>%
head(n = 5)
measures <- tibble(subject = rep(paste0("s", 1:20),
each = 10),
iq_test = rnorm(200, 100, 15))
measures <- tibble(subject = rep(paste0("s", 1:20),
each = 10),
iq_test = rnorm(200, 100, 15))
measures %>%
inner_join(meta_data, by = "subject") %>%
tail(n = 2)
measures %>%
full_join(meta_data, by = "subject") %>%
tail(n = 2)
measures %>%
left_join(meta_data, by = "subject") %>%
tail(n = 2)
measures %>%
right_join(meta_data, by = "subject") %>%
tail(n = 2)
relig_income %>%
head(4)
relig_income %>%
pivot_longer(cols = !religion,
names_to = "income",
values_to = "count") %>%
head(4)
billboard %>%
head(4)
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
) %>%
head(4)
relig_income %>%
pivot_longer(cols = !religion,
names_to = "income",
names_prefix = "$"
values_to = "count") %>%
relig_income %>%
pivot_longer(cols = !religion,
names_to = "income",
names_prefix = "$",
values_to = "count") %>%
head(4)
relig_income %>%
pivot_longer(cols = !religion,
names_to = "income",
# names_prefix = "$",
values_to = "count") %>%
head(4)
fish_encounters %>%
pivot_wider(names_from = station,
values_from = seen) %>%
tail(4)
us_rent_income %>%
head(5)
who_data <- who
who_data %>%
head(5)
View(who_data)
library(tidyverse)
library(magrittr)
who_data <- who
who_data %>%
head(5)
who_data %<>%
select(-c(iso2, iso3))
who_data %<>%
mutate(country = as_factor(country))
who_data %<>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
who_data %<>%
drop_na()
who_data %<>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
View(who_data)
who_data %<>%
separate(key, c("new", "type", "sexage"), sep = "_")
View(who_data)
library(tidyverse)
library(magrittr)
who_data <- who
who_data %>%
head(5)
who_data %<>%
select(-c(iso2, iso3))
who_data %<>%
mutate(country = as_factor(country))
who_data %<>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
who_data %<>%
drop_na()
who_data %<>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new)
View(who_data)
library(tidyverse)
library(magrittr)
who_data <- who
who_data %>%
head(5)
who_data %<>%
select(-c(iso2, iso3))
who_data %<>%
mutate(country = as_factor(country))
who_data %<>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
who_data %<>%
drop_na()
who_data %<>%
separate(key, c("new", "type", "sexage"), sep = "_")
library(tidyverse)
library(magrittr)
who_data <- who
who_data %>%
head(5)
who_data %<>%
select(-c(iso2, iso3))
who_data %<>%
mutate(country = as_factor(country))
who_data %<>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
who_data %<>%
drop_na()
who_data %<>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new)
View(who_data)
library(tidyverse)
library(magrittr)
who_data <- who
who_data %>%
head(5)
who_data %<>%
select(-c(iso2, iso3))
who_data %<>%
mutate(country = as_factor(country))
who_data %<>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
who_data %<>%
drop_na()
View(who_data)
who_data %<>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
View(who_data)
View(who_data)
library(tidyverse)
library(magrittr)
who_data <- who
who_data %>%
head(5)
who_data %<>%
select(-c(iso2, iso3))
who_data %<>%
mutate(country = as_factor(country))
who_data %<>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = "key",
values_to = "cases",
)
who_data %<>%
drop_na()
who_data %<>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who_data %<>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new)
View(who_data)
who_data %<>%
separate(sexage, c("sex", "age"), sep = 1)
View(who_data)
who %>%
select(country, iso2, iso3) %>%
distinct() %>%
group_by(country) %>%
filter(n() > 1)
# Your code goes here
```
df <- data.frame(
abc = 1,
xyz = "a"
)
# operations
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
df <- data.frame(
abc = 1,
xyz = "a"
)
# operations
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
library(tibble)
# Create equivalent tibble
tb <- tibble(
abc = 1,
xyz = "a"
)
# operations
tb$x
tb[, "xyz"]
tb[, c("abc", "xyz")]
as_tibble(df)
print(df$x)
print(df[, "xyz"])
print(df[, c("abc", "xyz")])
df <- data.frame(
abc = 1,
xyz = "a"
)
# operations
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
df <- data.frame(
abc = 1,
xyz = "a"
)
print(df$x)
print(df[, "xyz"])
print(df[, c("abc", "xyz")])
as_tibble(df)
survey_data <- haven::read_spss('~/Desktop/R_Studio/data/survey_data.sav')
df <- data.frame(
abc = 1,
xyz = "a"
)
print(df$x)
print(df[, "xyz"])
print(df[, c("abc", "xyz")])
print(df$x)
print(as_tibble(df)$x)
library(tidyverse)
print(as_tibble(df)$x)
df <- data.frame(
abc = 1,
xyz = "a"
)
print(df$x)
as_tibble(df)
print(df$x)
df <- data.frame(
abc = 1,
xyz = "a"
)
print(df$x)
as_tibble(df)
# print(df$x)
df
print(df$x)
my_data %>%
rename(sex = gender)
measures <- tibble(subject = rep(paste0("s", 1:10),
each = 10),
iq_test = rnorm(100, 100, 15))
meta_data <- tibble(subject = paste0("s", 1:10),
age = rep(c("old", "young"),
each = 5))
View(measures)
View(meta_data)
View(measures)
View(meta_data)
measures <- measures %>%
inner_join(meta_data, by="subject")
View(measures)
#| echo: false
#| message: false
library(tidyverse)
library(magrittr)
who_data <- who
View(who_data)
library(tidyverse)
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("Fontanesi2019.csv")
df$pair_type <- NA
df$pair_type[df$cor_option == 2] <- 1
df$pair_type[df$cor_option == 3] <- 2
df$pair_type[df$cor_option == 4 & df$inc_option == 2] <- 3
df$pair_type[df$cor_option == 4 & df$inc_option == 3] <- 4
df %<>%
mutate(resp = ifelse(accuracy == 1, cor_option, inc_option)) %>%
select(participant, trial_block, block_label,
rt, resp, accuracy,
f_cor:inc_option, pair_type) %>%
rename(id = participant,
correct = accuracy,
trial = trial_block,
block = block_label) %>%
mutate(resp = resp - 1,
cor_option = cor_option - 1,
inc_option = inc_option - 1,
pair_type = pair_type - 1)
# write_csv(df, "data_fontanesi_prep.csv")
sumsum <- df %>%
group_by(id) %>%
summarise(n = length(rt))
View(sumsum)
