f_cor:inc_option, pair_type) %>%
rename(id = participant,
correct = accuracy,
trial = trial_block,
block = block_label)
View(df)
library(tidyverse)
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("Fontanesi2019.csv")
df$pair_type <- NA
df$pair_type[df$cor_option == 2] <- 1
df$pair_type[df$cor_option == 3] <- 2
df$pair_type[df$cor_option == 4 & df$inc_option == 2] <- 3
df$pair_type[df$cor_option == 4 & df$inc_option == 3] <- 4
df %<>%
mutate(resp = ifelse(accuracy == 1, cor_option, inc_option)) %>%
select(participant, trial_block, block_label,
rt, resp, accuracy,
f_cor:inc_option, pair_type) %>%
rename(id = participant,
correct = accuracy,
trial = trial_block,
block = block_label) %>%
mutate(resp = resp - 1,
cor_option = cor_option - 1,
inc_option = inc_option - 1,
pair_type = pair_type - 1)
library(tidyverse)
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("Fontanesi2019.csv")
df$pair_type <- NA
df$pair_type[df$cor_option == 2] <- 1
df$pair_type[df$cor_option == 3] <- 2
df$pair_type[df$cor_option == 4 & df$inc_option == 2] <- 3
df$pair_type[df$cor_option == 4 & df$inc_option == 3] <- 4
df %<>%
mutate(resp = ifelse(accuracy == 1, cor_option, inc_option)) %>%
select(participant, trial_block, block_label,
rt, resp, accuracy,
f_cor:inc_option, pair_type) %>%
rename(id = participant,
correct = accuracy,
trial = trial_block,
block = block_label) %>%
mutate(resp = resp - 1,
cor_option = cor_option - 1,
inc_option = inc_option - 1,
pair_type = pair_type - 1)
View(df)
library(tidyverse)
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("Fontanesi2019.csv")
df$pair_type <- NA
df$pair_type[df$cor_option == 2] <- 1
df$pair_type[df$cor_option == 3] <- 2
df$pair_type[df$cor_option == 4 & df$inc_option == 2] <- 3
df$pair_type[df$cor_option == 4 & df$inc_option == 3] <- 4
df %<>%
mutate(resp = ifelse(accuracy == 1, cor_option, inc_option)) %>%
select(participant, trial_block, block_label,
rt, resp, accuracy,
f_cor:inc_option, pair_type) %>%
rename(id = participant,
correct = accuracy,
trial = trial_block,
block = block_label) %>%
mutate(resp = resp - 1,
cor_option = cor_option - 1,
inc_option = inc_option - 1,
pair_type = pair_type - 1)
write_csv(df, "data_fontanesi_prep.csv")
library(tidyverse)
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("Fontanesi2019.csv")
View(df)
sumsum <- df %>%
group_by(id) %>%
summarise(n = nrow())
library(tidyverse)
library(magrittr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
df <- read_csv("Fontanesi2019.csv")
df$pair_type <- NA
df$pair_type[df$cor_option == 2] <- 1
df$pair_type[df$cor_option == 3] <- 2
df$pair_type[df$cor_option == 4 & df$inc_option == 2] <- 3
df$pair_type[df$cor_option == 4 & df$inc_option == 3] <- 4
df %<>%
mutate(resp = ifelse(accuracy == 1, cor_option, inc_option)) %>%
select(participant, trial_block, block_label,
rt, resp, accuracy,
f_cor:inc_option, pair_type) %>%
rename(id = participant,
correct = accuracy,
trial = trial_block,
block = block_label) %>%
mutate(resp = resp - 1,
cor_option = cor_option - 1,
inc_option = inc_option - 1,
pair_type = pair_type - 1)
write_csv(df, "data_fontanesi_prep.csv")
sumsum <- df %>%
group_by(id) %>%
summarise(n = nrow())
sumsum <- df %>%
group_by(id) %>%
summarise(n = length(rt))
View(df)
View(sumsum)
# Extract ages of women and men
women_age <- person_data$age[person_data$female == 1]
person_data <- list(name = c("Stephanie", "Milena", "Kathrin", "Wiebke",
"Nils", "Fabian", "Thorben", "Lukas"),
female = c(1, 1, 1, 1, 0, 0, 0, 0),
age = c("26", "28", "27", "27",
"28", "28", "30", "31"))
# Extract ages of women and men
women_age <- person_data$age[person_data$female == 1]
men_age <- person_data$age[person_data$female == 0]
# Check for missing values in women_age and men_age
if (any(is.na(women_age)) || any(is.na(men_age))) {
print("Error: Missing values detected in age data.")
} else {
# Calculate average ages
avg_women_age <- mean(women_age)
avg_men_age <- mean(men_age)
# Determine the age range for women and men
women_age_range <- paste(min(women_age, na.rm = TRUE), "-", max(women_age, na.rm = TRUE))
men_age_range <- paste(min(men_age, na.rm = TRUE), "-", max(men_age, na.rm = TRUE))
# Compare average ages and print the result
if (avg_women_age > avg_men_age) {
message <- paste("The women (age range:", women_age_range, ") are on average older than the men (age range:", men_age_range, ")")
} else {
message <- paste("The men (age range:", men_age_range, ") are on average older than the women (age range:", women_age_range, ")")
}
print(message)
}
women_age <- person_data$age[person_data$female == 1]
men_age <- person_data$age[person_data$female == 0]
women_age
men_age
if (any(is.na(women_age)) || any(is.na(men_age))) {
print("Error: Missing values detected in age data.")
if (any(is.na(women_age)) || any(is.na(men_age))) {
print("Error: Missing values detected in age data.")
} else {
# Calculate average ages
avg_women_age <- mean(women_age)
avg_men_age <- mean(men_age)
# Determine the age range for women and men
women_age_range <- paste(min(women_age, na.rm = TRUE), "-", max(women_age, na.rm = TRUE))
men_age_range <- paste(min(men_age, na.rm = TRUE), "-", max(men_age, na.rm = TRUE))
# Compare average ages and print the result
if (avg_women_age > avg_men_age) {
message <- paste("The women (age range:", women_age_range, ") are on average older than the men (age range:", men_age_range, ")")
} else {
message <- paste("The men (age range:", men_age_range, ") are on average older than the women (age range:", women_age_range, ")")
}
print(message)
}
# Extract ages of women and men
women_age <- person_data$age[person_data$female == 1]
men_age <- person_data$age[person_data$female == 0]
# Check for missing values in women_age and men_age
if (any(is.na(women_age)) || any(is.na(men_age))) {
print("Error: Missing values detected in age data.")
} else {
# Calculate average ages
avg_women_age <- mean(women_age)
avg_men_age <- mean(men_age)
# Determine the age range for women and men
women_age_range <- paste(min(women_age, na.rm = TRUE), "-", max(women_age, na.rm = TRUE))
men_age_range <- paste(min(men_age, na.rm = TRUE), "-", max(men_age, na.rm = TRUE))
# Compare average ages and print the result
if (avg_women_age > avg_men_age) {
message <- paste("The women (age range:", women_age_range, ") are on average older than the men (age range:", men_age_range, ")")
} else {
message <- paste("The men (age range:", men_age_range, ") are on average older than the women (age range:", women_age_range, ")")
}
print(message)
}
possible_results <- c(0, 1, 3)
football_results_A <- sample(possible_results, 10, replace = TRUE)
football_results_B <- sample(possible_results, 10, replace = TRUE)
if (sum(football_results_A) > sum(football_results_B)) {
message <- paste("Team A is leading with a difference of", (sum(football_results_A)) - (sum(football_results_B)), "points")
}
else if (sum(football_results_A) == sum(football_results_B)) {
possible_results <- c(0, 1, 3)
football_results_A <- sample(possible_results, 10, replace = TRUE)
football_results_B <- sample(possible_results, 10, replace = TRUE)
if (sum(football_results_A) > sum(football_results_B)) {
message <- paste("Team A is leading with a difference of", (sum(football_results_A)) - (sum(football_results_B)), "points")
} else if (sum(football_results_A) == sum(football_results_B)) {
message <- paste("Team A and Team B are tied with", (sum(football_results_A)),  "points")
} else {
message <- paste("Team B is leading with a difference of", (sum(football_results_B) - sum(football_results_A)), "points")
}
print(message)
# Sample two random integers between 1 and 50
x <- sample(1:50, 1)
y <- sample(1:50, 1)
# Check if x is larger than y and if x is odd
if (x > y & x %% 2 == 1) {
message <- "Hit!"
} else if (x <= y & x %% 2 != 1) {
message <- "Hit!"
} else {
message <- "Miss!"
}
print(message)
x <- sample(-50:50, 20, replace = TRUE)
x <- ifelse(x <= -10 | x >= 10, -10, NA)
print(x)
repeat {
number <- sample(1:100, 1)
if (number %% 3 == 0 & number %% 5 == 0) {
break
}
}
print(number)
# Initialize variables
total_sum <- 0
throws <- 0
# Roll the die until the sum exceeds 31
while (total_sum <= 31) {
roll <- sample(1:6, 1, replace = TRUE)
total_sum <- total_sum + roll
throws <- throws + 1
}
print(total_sum)
print(throws)
for(i in 1:20)
{
coin <- sample(c(0,1), 1, replace = TRUE)
head_count <- (head_count + coin)
percentage <- (head_count/i)*100
print(percentage)
}
Titanic
gender_sum <- apply(Titanic, c("Sex"), sum)
print(gender_sum)
survivors_sex <- apply(Titanic, c("Sex", "Survived"), sum)
print(survivors_sex)
generate_list <- function(len) {
letters <- rep(c('A', 'F'), len)
letters[1:len]
}
result_list <- mapply(generate_list, len = seq(10, 1, by = -1))
print(result_list)
n_flips <- 20
outcomes <- numeric(n_flips)
outcomes
rbinom(n=1, size=1, p=0.5)
rbinom(n=10, size=1, p=0.5)
rbinom(n=10, size=5, p=0.5)
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
set.seed(2)
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
set.seed(3)
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
n_flips <- 20
outcomes <- numeric(n_flips)
for (i in 1:n_flips) {
outcomes[i] <- rbinom(n = 1, size = 1, p = 0.5)
cat("Current percentage of heads:", mean(outcomes[1:i]) * 100, "%\n")
}
my_string <- "9 Fruits"
print(paste("This is my string:", my_string))
print("This is my string:", my_string)
print(paste("This is my string:", my_string))
as.integer(scan(what = numeric(0), nmax = 1))
as.integer(scan(what = numeric(), nmax = 1))
# initialize variables
target <- sample(1:10, 1)
guess <- 0
cat("Guess a number between 1 and 10", "\n")
while (guess != target) {
# get the user's guess
guess <- as.integer(scan(what = numeric(), nmax = 1))
if (guess == target) {
print("Congratulations, you guessed the target number!\n")
} else {
print("Incorrect, please try again\n")
}
}
# initialize variables
target <- sample(1:10, 1)
guess <- 0
cat("Guess a number between 1 and 10", "\n")
while (guess != target) {
# get the user's guess
guess <- as.integer(scan(what = numeric(), nmax = 1))
if (guess == target) {
print("Congratulations, you guessed the target number!", "\n")
} else {
print("Incorrect, please try again", "\n")
}
}
# initialize variables
target <- sample(1:10, 1)
guess <- 0
cat("Guess a number between 1 and 10", "\n")
while (guess != target) {
# get the user's guess
guess <- as.integer(scan(what = numeric(), nmax = 1))
if (guess == target) {
cat("Congratulations, you guessed the target number!", "\n")
} else {
cat("Incorrect, please try again", "\n")
}
}
# initialize variables
target <- sample(1:10, 1)
guess <- 0
cat("Guess a number between 1 and 10", "\n")
while (guess != target) {
# get the user's guess
guess <- as.integer(scan(what = numeric(), nmax = 1))
if (guess == target) {
cat("Congratulations, you guessed the target number!", "\n")
} else {
cat("Incorrect, please try again", "\n")
}
}
# initialize variable
random_number <- 0
while (abs(random_number) <= 1) {
# generate a random standard normal number
random_number <- rnorm(1)
cat("Random number:", random_number, "\n")
}
# initialize variable
random_number <- 0
while (abs(random_number) <= 1) {
# generate a random standard normal number
random_number <- rnorm(1)
# skip printing if negative number
if (random_number < 0) {
next
}
cat("Random number:", random_number, "\n")
}
# initialize variable
random_number <- 0
while (abs(random_number) <= 1) {
# generate a random standard normal number
random_number <- rnorm(1)
# skip printing if negative number
if (random_number < 0) {
next
}
cat("Random number:", random_number, "\n")
}
my_string <- "9 Fruits"
paste("This is my string:", my_string)
my_string <- "9 Fruits"
print(paste("This is my string:", my_string))
my_string <- "9 Fruits"
cat("This is my string:", my_string)
my_string <- "9 Fruits"
print(cat("This is my string:", my_string))
#concatenate several strings together
results <- cat("hey", "there", "everyone")
#attempt to view concatenated string
results
#concatenate several strings together
results <- cat("hey", "there", "everyone")
experiment_data <- read_csv('data/data_session_1.csv')
df <- data.frame(
abc = 1,
xyz = "a"
)
# operations
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
print(df$x)
print(df[, "xyz"])
print(df[, c("abc", "xyz")])
library(tidyverse)
tb <- tibble(
abc = 1,
xyz = "a"
)
print(tb$x)
print(tb[, "xyz"])
print(tb[, c("abc", "xyz")])
library(tidyverse)
subjective_utility <- function(values, w=0.5) {
utility <- w*sum(values)
return(utility)
}
value_function <- function(x, a, lambda) {
if (x >= 0) {
x^a
} else {
-lambda*abs(x)^a
}
}
prospect_model <- function(x_1, x_2, a, lambda, w=0.5) {
v_1 <- value_function(x_1, a, lambda)
v_2 <- value_function(x_2, a, lambda)
utility <- subjective_utility(c(v_1, v_2), w)
return(utility)
}
prospect_model <- function(gain, loss, a, lambda, w=0.5) {
w*gain^a + w*lambda*(-loss)^a
}
gain <- seq(0, 100, 0.1)
loss <- seq(0, -100, -0.1)
utility <- map2_dbl(.x = gain,
.y = loss,
.f = prospect_model,
a=0.2,
lambda=1)
plot(x_2, utility, type="l")
x_1 <- seq(0, -100, -0.1)
x_2 <- seq(0, 100, 0.1)
utility <- map2_dbl(.x = x_1,
.y = x_2,
.f = prospect_model,
a=0.8,
lambda=2.25)
plot(x_2, utility, type="l")
utility
utility <- map2_dbl(.x = x_1,
.y = x_2,
.f = prospect_model,
a=0.8,
lambda=2.25)
prospect_model(50, 50, 0.8, 0)
prospect_model <- function(gain, loss, a, lambda, w=0.5) {
w*gain^a + w*lambda*(-loss)^a
}
prospect_model(50, 50, 0.8, 0)
prospect_model <- function(x_1, x_2, a, lambda, w=0.5) {
v_1 <- value_function(x_1, a, lambda)
v_2 <- value_function(x_2, a, lambda)
utility <- subjective_utility(c(v_1, v_2), w)
return(utility)
}
prospect_model(50, 50, 0.8, 0)
x_1 <- seq(0, -100, -0.1)
x_2 <- seq(0, 100, 0.1)
utility <- map2_dbl(.x = x_1,
.y = x_2,
.f = prospect_model,
a=0.8,
lambda=2.25)
plot(x_2, utility, type="l")
utility <- map2_dbl(.x = gain,
.y = loss,
.f = prospect_model,
a=0.2,
lambda=1)
plot(x_2, utility, type="l")
